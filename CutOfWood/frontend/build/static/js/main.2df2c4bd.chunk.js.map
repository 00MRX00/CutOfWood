{"version":3,"sources":["hoc/Layout/Layout.css","components/Header/Header.css","components/Header/Header.js","hoc/Layout/Layout.js","axios/myAxios.js","store/actions/auth.js","store/actions/actionTypes.js","App.js","serviceWorker.js","store/reducers/auth.js","store/reducers/rootReducer.js","index.js"],"names":["module","exports","connect","state","isAuthenticated","authReducer","token","props","className","classes","Header","id","to","Fragment","Layout","this","children","React","Component","axios","create","baseURL","logout","localStorage","removeItem","type","authSuccess","user","App","autoLogin","routers","withRouter","dispatch","a","getItem","options","method","headers","url","then","response","data","catch","Boolean","window","location","hostname","match","initialState","errorMessage","combineReducers","action","composeEnhancers","__REDUX_DEVTOOLS_EXTENSION_COMPOSE__","compose","persistConfig","key","storage","persistedReducer","persistReducer","rootReducer","store","createStore","applyMiddleware","thunk","persistor","persistStore","ReactDOM","render","loading","document","getElementById","navigator","serviceWorker","ready","registration","unregister","error","console","message"],"mappings":"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","file":"static/js/main.2df2c4bd.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"Layout\":\"Layout_Layout__1-68l\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"Header\":\"Header_Header__2HSLQ\"};","import React from 'react'\r\nimport classes from './Header.css'\r\nimport { connect } from 'react-redux'\r\nimport {NavLink} from 'react-router-dom'\r\n\r\nconst Header = props => {\r\n    return (\r\n        <nav className={classes.Header + \" navbar navbar-expand-lg navbar-dark bg-dark \"}>\r\n            <div className=\"collapse navbar-collapse\" id=\"navbarSupportedContent\">\r\n                <ul className=\"navbar-nav mr-auto\">\r\n                    <li className=\"navbar-item\">\r\n                        <NavLink className=\"navbar-brand\" to={\"/\"}>CutOfWood</NavLink>\r\n                    </li>\r\n                </ul>\r\n                <ul className=\"navbar-nav my-2 my-lg-0\">\r\n                    {\r\n                        !props.isAuthenticated\r\n                            ? <React.Fragment>\r\n                                <li className=\"nav-item\">\r\n                                    <NavLink className=\"nav-link\" to={\"/auth\"}>Авторизация</NavLink>\r\n                                </li>\r\n                                <li className=\"nav-item\">\r\n                                    <NavLink className=\"nav-link\" to={\"/registration\"}>Регистрация</NavLink>\r\n                                </li>\r\n                            </React.Fragment>\r\n                            : <React.Fragment>\r\n                                <li className=\"nav-item\">\r\n                                    <NavLink className=\"nav-link\" to={\"/logout\"}>Выйти</NavLink>\r\n                                </li>\r\n                            </React.Fragment>\r\n                    }\r\n                </ul>\r\n            </div>\r\n        </nav>\r\n    )\r\n}\r\n\r\nfunction mapStateToProps(state) {\r\n    return {\r\n        isAuthenticated: !!state.authReducer.token\r\n    };\r\n}\r\n\r\nexport default connect(mapStateToProps)(Header);\r\n","import React from 'react';\r\nimport classes from './Layout.css';\r\nimport { connect } from 'react-redux';\r\nimport Header from '../../components/Header/Header';\r\n\r\nclass Layout extends React.Component {\r\n    render() {\r\n        return (\r\n            <div className={classes.Layout}>\r\n                <Header />\r\n\r\n                <main>\r\n                    {this.props.children}\r\n                </main>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\n\r\nexport default connect()(Layout);","import axios from 'axios'\r\n\r\nexport default axios.create({\r\n    baseURL: \"http://127.0.0.1:8000/api\",\r\n})","import axios from '../../axios/myAxios'\r\nimport { AUTH_SUCCESS, AUTH_LOGOUT, AUTH_ERROR, REGISTRATION_ERROR } from './actionTypes'\r\n\r\nexport function auth(email, password) {\r\n    return async dispatch => {\r\n        const requestData = {\r\n            email: email,\r\n            password: password,\r\n        }\r\n\r\n        let url = \"auth/login\"\r\n\r\n        const options = {\r\n            method: 'POST',\r\n            headers: {\r\n                'Content-Type': 'application/json',\r\n            },\r\n            data: JSON.stringify(requestData),\r\n            url: url\r\n        };\r\n\r\n        await axios(options)\r\n            .then(response => {\r\n                localStorage.setItem('token', response.data.token);\r\n                dispatch(authSuccess(response.data.user, response.data.token));\r\n            })\r\n            .catch(() => {\r\n                dispatch(authError());\r\n            })\r\n    };\r\n}\r\n\r\nexport function deleteToken() {\r\n    return async dispatch => {\r\n        const token = localStorage.getItem('token')\r\n        const options = {\r\n            method: 'POST',\r\n            headers: {\r\n                'Authorization': 'Token ' + token,\r\n            },\r\n            url: \"auth/logout\"\r\n        };\r\n\r\n        await axios(options)\r\n            .then(() => {\r\n                dispatch(logout())\r\n            })\r\n    };\r\n}\r\n\r\n/* export function allLogout() {\r\n    return {\r\n        type: AUTH_LOGOUT\r\n    };\r\n}\r\n\r\nexport function logout() {\r\n    return async dispatch => {\r\n        localStorage.removeItem('token')\r\n        dispatch(allLogout())\r\n    }\r\n} */\r\n\r\nexport function logout() {\r\n    localStorage.removeItem('token')\r\n    return {\r\n        type: AUTH_LOGOUT\r\n    };\r\n}\r\n\r\nexport function authSuccess(user, token) {\r\n    return {\r\n        type: AUTH_SUCCESS,\r\n        user,\r\n        token\r\n    };\r\n}\r\n\r\nexport function authError() {\r\n    return {\r\n        type: AUTH_ERROR,\r\n        errorMessage: \"Неправильный логин или пароль\"\r\n    };\r\n}\r\n\r\nexport function autoLogin() {\r\n    return async dispatch => {\r\n        const token = localStorage.getItem('token');\r\n        if (token) {\r\n            const options = {\r\n                method: 'GET',\r\n                headers: {\r\n                    'Authorization': 'Token ' + token,\r\n                },\r\n                url: \"auth/user\"\r\n            };\r\n\r\n            await axios(options)\r\n                .then((response) => {\r\n                    dispatch(authSuccess(response.data, token))\r\n                })\r\n                .catch(() => {\r\n                    dispatch(logout())\r\n                })\r\n\r\n        } else {\r\n            dispatch(logout())\r\n        }\r\n\r\n    };\r\n}\r\n\r\nexport function registration(formControls) {\r\n    return async dispatch => {\r\n        let url = \"auth/register\"\r\n\r\n        const options = {\r\n            method: 'POST',\r\n            headers: {\r\n                'Content-Type': 'application/json',\r\n            },\r\n            data: JSON.stringify(formControls),\r\n            url: url\r\n        };\r\n        await axios(options)\r\n            .catch(() => {\r\n                dispatch(registrationError());\r\n            })\r\n    };\r\n}\r\n\r\nexport function registrationError() {\r\n    return {\r\n        type: REGISTRATION_ERROR,\r\n        errorMessage: \"Ошибка регистрации\"\r\n    };\r\n}","export const AUTH_SUCCESS = 'AUTH_SUCCESS';\r\nexport const AUTH_LOGOUT = 'AUTH_LOGOUT';\r\nexport const AUTH_ERROR = 'AUTH_ERROR';\r\n\r\nexport const REGISTRATION_SUCCESS = 'REGISTRATION_SUCCESS';\r\nexport const REGISTRATION_ERROR = 'REGISTRATION_ERROR';","import React from 'react';\n\nimport Layout from './hoc/Layout/Layout'\nimport { Route, Switch, Redirect, withRouter } from 'react-router-dom'\nimport { connect } from 'react-redux'\nimport { autoLogin } from './store/actions/auth'\n// import Home from './components/Home/Home'\n// import Auth from './components/Auth/Auth'\n// import Registration from './components/Registration/Registration'\n// import Logout from './components/Logout/Logout'\n\nclass App extends React.Component {\n\tasync UNSAFE_componentWillMount() {\n\t\tawait this.props.autoLogin();\n\t}\n\n\trender() {\n\t\tlet routers = (\n\t\t\t<Switch>\n\t\t\t\t{/* <Route path=\"/auth\" component={Auth} /> */}\n\t\t\t\t{/* <Route path=\"/registration\" component={Registration} /> */}\n\t\t\t\t{/* <Route exact path=\"/\" component={Home} /> */}\n\t\t\t\t<Redirect to={\"/\"} />\n\t\t\t</Switch>\n\t\t);\n\t\t\n\t\tif (this.props.isAuthenticated) {\n\t\t\trouters = (\n\t\t\t\t<Switch>\n\t\t\t\t\t{/* <Route path=\"/logout/\" component={Logout} /> */}\n\t\t\t\t\t{/* <Route exact path=\"/\" component={Home} /> */}\n\t\t\t\t\t<Redirect to={\"/\"} />\n\t\t\t\t</Switch>\n\t\t\t);\n\t\t}\n\t\t\n\t\treturn (\n\t\t\t<Layout>\n\t\t\t\t{routers}\n\t\t\t</Layout>\n\t\t);\n\t}\n}\n\nfunction mapStateToProps(state) {\n\treturn {\n\t\tisAuthenticated: !!state.authReducer.token\n\t};\n}\n\nfunction mapDispatchToProps(dispatch) {\n\treturn {\n\t\tautoLogin: () => dispatch(autoLogin())\n\t};\n}\n\nexport default withRouter(connect(mapStateToProps, mapDispatchToProps)(App));","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import { AUTH_SUCCESS, AUTH_LOGOUT, AUTH_ERROR, REGISTRATION_ERROR } from \"../actions/actionTypes\";\r\n\r\nconst initialState = {\r\n    token: null,\r\n    user: {},\r\n    errorMessage: \"\"\r\n}\r\n\r\nexport default function authReducer(state = initialState, action) {\r\n    switch (action.type) {\r\n        case AUTH_SUCCESS:\r\n            return {\r\n                ...state,\r\n                token: action.token,\r\n                user: action.user,\r\n                errorMessage: \"\"\r\n            };\r\n        case AUTH_LOGOUT:\r\n            return initialState;\r\n        case AUTH_ERROR:\r\n            return {\r\n                ...state,\r\n                errorMessage: action.errorMessage\r\n            };\r\n        case REGISTRATION_ERROR:\r\n            return {\r\n                ...state,\r\n                errorMessage: action.errorMessage\r\n            };\r\n        default:\r\n            return state;\r\n    }\r\n}","import { combineReducers } from 'redux';\r\nimport authReducer from './auth';\r\n\r\nexport default combineReducers({\r\n    authReducer,\r\n})","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nimport { BrowserRouter } from 'react-router-dom';\nimport { createStore, compose, applyMiddleware } from 'redux';\nimport { Provider } from \"react-redux\";\nimport rootReducer from './store/reducers/rootReducer.js';\nimport thunk from 'redux-thunk';\n\nimport { persistStore, persistReducer } from 'redux-persist'\nimport storage from 'redux-persist/lib/storage'\nimport { PersistGate } from 'redux-persist/integration/react'\n\n\nconst composeEnhancers =\n\ttypeof window === 'object' &&\n\t\twindow.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__ ?\n\t\twindow.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__({\n\t\t\t// Specify extension’s options like name, actionsBlacklist, actionsCreators, serialize...\n\t\t}) : compose;\n\nconst persistConfig = {\n\tkey: 'root',\n\tstorage,\n}\n\nconst persistedReducer = persistReducer(persistConfig, rootReducer)\n\nlet store = createStore(persistedReducer, composeEnhancers(applyMiddleware(thunk)))\nlet persistor = persistStore(store)\n\nReactDOM.render(\n\t<Provider store={store}>\n\t\t<BrowserRouter>\n\t\t\t<PersistGate loading={null} persistor={persistor}>\n\t\t\t\t<App />\n\t\t\t</PersistGate>\n\t\t</BrowserRouter>\n\t</Provider>,\n\tdocument.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}